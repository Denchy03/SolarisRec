@page "/deck"

@using SolarisRec.UI.Components.Dropdown
@using SolarisRec.UI.Provdiders
@using SolarisRec.UI.UIModels

<MudDialogProvider />

<MudGrid id="Dropdowns">
    <MudItem>
        <MudMultiSelectDropdown @ref="factionDropdown" DropdownItems="FactionDropdownItems" Dense="true"
                                Label="Factions" @bind-SelectedValues="@SelectedFactions.Selected" />
    </MudItem>
    <MudItem>
        <MudMultiSelectDropdown @ref="cardTypeDropdown" DropdownItems="CardTypeDropdownItems" Dense="true"
                                Label="Card Type" @bind-SelectedValues="@SelectedCardTypes.Selected" />
    </MudItem>
    <MudItem>
        <MudMultiSelectDropdown @ref="crcDropdown" DropdownItems="ConvertedResourceCostDropdownItems" Dense="true"
                                Label="Converted Cost" @bind-SelectedValues="@SelectedConvertedResourceCosts.Selected" />
    </MudItem>
    <MudItem>
        <MudMultiSelectDropdown @ref="talentsDropdown" DropdownItems="TalentDropdownItems" Dense="true"
                                Label="Talents" @bind-SelectedValues="@SelectedTalents.Selected" />
    </MudItem>
    <MudItem>
        <MudMultiSelectDropdown @ref="keywordDropdown" DropdownItems="KeywordDropdownItems" Dense="true"
                                Label="Keyword" @bind-SelectedValues="@SelectedKeywords.Selected" />
    </MudItem>
</MudGrid>


<MudButton OnClick="ClearFilters">Clear Filters</MudButton>

<MudGrid id="SearchCommands">
    <MudItem xs="12" md="6" id="Search">
        <MudTextField T="string" @ref="searchByName" Label="Search by Name"
                      DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchByName">
        </MudTextField>

        <MudTextField T="string" @ref="searchByAbility" Label="Search by Ability" 
                      DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchByAbility"></MudTextField>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Save" OnClick="Export" ></MudIconButton>

        @if (!ValidationResult.IsDeckValid)
        {
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Warning" OnClick="ShowReasons" />
        }

        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Clear" OnClick="ClearDeck" />
    </MudItem>
</MudGrid>

<MudGrid>

    <MudItem id="CardSearch" xs="8">

        <MudPaper Class="solaris-deck-item-header d-flex px-2 align-center my-1">
            <MudText Typo="Typo.body2" Class="name-header">Name 
                <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Sort" OnClick="() => SetSorting(nameof(Card.Name))"></MudIconButton>
            </MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="factions-header">Factions</MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="type-header">Type</MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="resourceCostIcon-header">C
                <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Sort" OnClick="() => SetSorting(nameof(Card.Costs))"></MudIconButton>
            </MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="talentIcon-header">T</MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="av-header">AV
                <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Sort" OnClick="() => SetSorting(nameof(Card.AttackValue))"></MudIconButton>
            </MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="hv-header">HV
                <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Sort" OnClick="() => SetSorting(nameof(Card.HealthValue))"></MudIconButton>
            </MudText>
            <MudSpacer />
            <MudDivider FlexItem="true" Vertical="true" />
            <MudText Typo="Typo.body2" Class="ability-header">Ability</MudText>
        </MudPaper>

        @foreach (var item in Cards)
        {
            <MudPaper @onclick="@(e => AddToDeck(e, item))" @onmouseover="@(() => UpdateImageSrc(item))"
                  Class="solaris-deck-item d-flex px-2 align-center my-1">
                <MudText Typo="Typo.body2" Class="name">@item.Name</MudText>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudText Typo="Typo.body2" Class="factions">@item.Factions</MudText>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudText Typo="Typo.body2" Class="type">@item.Type</MudText>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudItem Class="resourceCostIcon">
                    @for (int i = 0; i < @item.Costs.Count; i++)
                    {
                        for (int j = 0; j < @item.Costs[i].Quantity; j++)
                        {
                            <img src="@ResourceIconImageLinkProvider.Provide(@item.Costs[i])" width="30" height="26">
                        }
                    }
                </MudItem>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudItem Class="talentIcon">
                    @for (int i = 0; i < @item.Talents.Count; i++)
                    {
                        for (int j = 0; j < @item.Talents[i].Quantity; j++)
                        {
                            <img src="@TalentIconImageLinkProvider.Provide(@item.Talents[i])" width="30" height="26">
                        }
                    }
                </MudItem>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudText Typo="Typo.body2" Class="av">@item.AttackValue</MudText>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudText Typo="Typo.body2" Class="hv">@item.HealthValue</MudText>
                <MudSpacer />
                <MudDivider FlexItem="true" Vertical="true" />
                <MudText Typo="Typo.body2" Class="ability">@item.Ability</MudText>
            </MudPaper>
        }
        <MudPaper id="Paging" Class="solaris-deck-item d-flex px-2 align-center my-1">
            <MudText Typo="Typo.body2">Cards per page</MudText>
            <MudSpacer />
            <MudText Typo="Typo.body2">@PageSize</MudText>
            <MudSpacer />

            <MudText Typo="Typo.body2">@PageSizeFromTo of @TotalItems</MudText>
            <MudSpacer />
            <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FirstPage"></MudIconButton>
            <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowLeft"></MudIconButton>
            <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowRight"></MudIconButton>
            <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.LastPage"></MudIconButton>
        </MudPaper>

    </MudItem>

    <MudItem id="DecksAndPicture" xs="4" Spacing="0">
        <MudGrid>

            <MudItem xs="12" lg="6">
                <img src="@(ImgSrc)" width="100%" height="auto">

                <MudText GutterBottom="true"> Missions (@MissionDeck.Select(d => d.Quantity).Sum())</MudText>
                @foreach (var item in MissionDeck)
                {
                    <MudPaper @onclick="@(() => RemoveFromMissionDeck(item))" @onmouseover="@(() => UpdateImageSrc(item))"
                          Class="solaris-deck-item d-flex px-2 align-center my-1">
                        <MudText Typo="Typo.body2" Class="deckItemName">@item.Card.Name</MudText>
                        <MudSpacer />
                        <MudDivider FlexItem="true" Vertical="true" />
                        <MudText Typo="Typo.body2" Class="deckItemQuantity">@item.Quantity</MudText>
                    </MudPaper>
                }
            </MudItem>

            <MudItem xs="12" lg="6">
                <MudText GutterBottom="true"> Main deck (@MainDeckCardCount / @MainDeckAgentCount A)</MudText>
                @foreach (var item in MainDeck)
                {
                    <MudPaper @onclick="@(() => RemoveFromDeck(item))" @onmouseover="@(() => UpdateImageSrc(item))"
                          Class="solaris-deck-item d-flex px-2 align-center my-1">
                        <MudText Typo="Typo.body2" Class="deckItemName">@item.Card.Name</MudText>
                        <MudSpacer />
                        <MudDivider FlexItem="true" Vertical="true" />
                        <MudText Typo="Typo.body2" Class="deckItemQuantity">@item.Quantity</MudText>
                    </MudPaper>
                }

                <MudText GutterBottom="true"> Tactical Deck (@TacticalDeck.Select(d => d.Quantity).Sum())</MudText>
                @foreach (var item in TacticalDeck)
                {
                    <MudPaper @onclick="@(() => RemoveFromTacticalDeck(item))" @onmouseover="@(() => UpdateImageSrc(item))"
                          Class="solaris-deck-item d-flex px-2 align-center my-1">
                        <MudText Typo="Typo.body2" Class="deckItemName">@item.Card.Name</MudText>
                        <MudSpacer />
                        <MudDivider FlexItem="true" Vertical="true" />
                        <MudText Typo="Typo.body2" Class="deckItemQuantity">@item.Quantity</MudText>
                    </MudPaper>
                }
            </MudItem>

        </MudGrid>
    </MudItem>

</MudGrid>
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarisRec.Persistence;

#nullable disable

namespace SolarisRec.Persistence.Migrations
{
    [DbContext(typeof(SolarisRecDbContext))]
    [Migration("20211231120715_CardEntitiesThree")]
    partial class CardEntitiesThree
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("VARCHAR(320)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("AccountName"), false);

                    b.HasIndex("Email")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Email"), false);

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountName = "Superuser",
                            Email = "major.martin.tibor@gmail.com",
                            Password = "ThisPasswordIsOmegaSecureXD"
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttackValue")
                        .HasColumnType("int");

                    b.Property<int>("ExpansionId")
                        .HasColumnType("int");

                    b.Property<string>("ExpansionSerialNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("VARCHAR(4)");

                    b.Property<int?>("HealthValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Unique")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExpansionId");

                    b.ToTable("Cards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ability = "Forced Reaction: When thisAgent enters play, put 2 traitor counters on it.\r\nForced Reaction: When this Agent would leave play, instead remove 1 traitor counter from this Agent,\r\nheal all of its damage and your opponent takes control of it.",
                            AttackValue = 2,
                            ExpansionId = 1,
                            ExpansionSerialNumber = "001",
                            HealthValue = 2,
                            Name = "Turncoat",
                            Type = 1,
                            Unique = false
                        },
                        new
                        {
                            Id = 67,
                            Ability = "Deal 1 damage to each Agent on a Mission.",
                            ExpansionId = 1,
                            ExpansionSerialNumber = "067",
                            Name = "ChemicalWarfare",
                            Type = 3,
                            Unique = false
                        },
                        new
                        {
                            Id = 117,
                            Ability = "Forced Reaction: After this card enters play put the top 5 cards of your deck under it face down\r\n[You may look at these cards any time.]\r\nUse: Play a card from under this card. When there are no cards left under this card, destroy it.",
                            ExpansionId = 1,
                            ExpansionSerialNumber = "117",
                            Name = "Cyber Bank of Titan",
                            Type = 2,
                            Unique = true
                        },
                        new
                        {
                            Id = 159,
                            Ability = "Discard your hand then draw 5 cards.",
                            ExpansionId = 1,
                            ExpansionSerialNumber = "159",
                            Name = "Redistribution",
                            Type = 4,
                            Unique = false
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Decks", (string)null);
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Expansion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"), false);

                    b.ToTable("Expansions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "So it Begins"
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"), false);

                    b.ToTable("Factions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mars"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mercury"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Titan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Belt"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Earth"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Venus"
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardFaction", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("CardFactions", (string)null);

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            FactionId = 4
                        },
                        new
                        {
                            CardId = 117,
                            FactionId = 3
                        },
                        new
                        {
                            CardId = 67,
                            FactionId = 1
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardResource", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CardId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("CardResources", (string)null);

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            ResourceId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            CardId = 117,
                            ResourceId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            CardId = 117,
                            ResourceId = 7,
                            Quantity = 2
                        },
                        new
                        {
                            CardId = 67,
                            ResourceId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            CardId = 67,
                            ResourceId = 7,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardTalent", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("TalentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CardId", "TalentId");

                    b.HasIndex("TalentId");

                    b.ToTable("CardTalents", (string)null);

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            TalentId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            CardId = 159,
                            TalentId = 5,
                            Quantity = 4
                        },
                        new
                        {
                            CardId = 159,
                            TalentId = 4,
                            Quantity = 4
                        },
                        new
                        {
                            CardId = 159,
                            TalentId = 7,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"), false);

                    b.ToTable("Resources", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Martian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mercurian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Titanian"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beltian"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Earthian"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Venusian"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Talent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"), false);

                    b.ToTable("Talents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Card", b =>
                {
                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Expansion", "Expansion")
                        .WithMany("Cards")
                        .HasForeignKey("ExpansionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expansion");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardFaction", b =>
                {
                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Card", "Card")
                        .WithMany("CardFactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Faction", "Faction")
                        .WithMany("CardFactions")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardResource", b =>
                {
                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Card", "Card")
                        .WithMany("CardResources")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Resource", "Resource")
                        .WithMany("CardResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.JoiningTables.CardTalent", b =>
                {
                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Card", "Card")
                        .WithMany("CardTalents")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarisRec.Persistence.PersistenceModel.Talent", "Talent")
                        .WithMany("CardTalents")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Card", b =>
                {
                    b.Navigation("CardFactions");

                    b.Navigation("CardResources");

                    b.Navigation("CardTalents");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Expansion", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Faction", b =>
                {
                    b.Navigation("CardFactions");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Resource", b =>
                {
                    b.Navigation("CardResources");
                });

            modelBuilder.Entity("SolarisRec.Persistence.PersistenceModel.Talent", b =>
                {
                    b.Navigation("CardTalents");
                });
#pragma warning restore 612, 618
        }
    }
}
